{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","console","log","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","outcomeImg","className","totalImg","TransactionsTable","map","title","Intl","NumberFormat","style","currency","format","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionsModalOpen","setIsNewTransactionsModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAAe,MAA0B,mCCA1B,MAA0B,oCCA1B,MAA0B,kC,iDCE5BA,E,OAAMC,EAAMC,OAAO,CAC5BC,QAAS,8B,OCoBAC,EAAsBC,wBAC/B,IAGG,SAASC,EAAT,GAAwE,IAAxCC,EAAuC,EAAvCA,SACnC,EAAwCC,mBAAwB,IAAhE,mBAAOC,EAAP,KAAqBC,EAArB,KAD0E,4CAQ1E,WAAiCC,GAAjC,iBAAAC,EAAA,sEAC0BZ,EAAIa,KAAK,gBAAT,2BACfF,GADe,IAElBG,UAAW,IAAIC,QAHvB,OACSC,EADT,OAKWC,EAAgBD,EAASE,KAAzBD,YAERP,EAAgB,GAAD,mBACRD,GADQ,CAEXQ,KATP,4CAR0E,sBAqB1E,OAlBAE,qBAAU,WACNnB,EAAIoB,IAAI,gBACHC,MAAK,SAAAL,GAAQ,OAAIN,EAAgBM,EAASE,KAAKT,mBACrD,IAgBC,cAACL,EAAoBkB,SAArB,CAA8BC,MAAO,CAAEd,eAAce,kBAtBiB,6CAsBtE,SACKjB,IAKN,SAASkB,IAEZ,OADgBC,qBAAWtB,G,sBCtDlBuB,EAAYC,IAAOC,IAAV,itBCMf,SAASC,IACZ,IAAQrB,EAAiBgB,IAAjBhB,aACRsB,QAAQC,IAAIvB,GAEZ,IAAMwB,EAAUxB,EAAayB,QAAO,SAACC,EAAKlB,GAQtC,MAPyB,YAArBA,EAAYmB,MACZD,EAAIE,UAAYpB,EAAYqB,OAC5BH,EAAII,OAAStB,EAAYqB,SAEzBH,EAAIK,WAAavB,EAAYqB,OAC7BH,EAAII,OAAStB,EAAYqB,QAEtBH,IACR,CACCE,SAAU,EACVG,UAAW,EACXD,MAAO,IAGX,OACI,eAACZ,EAAD,WACI,gCACI,mCACI,yCACA,qBAAKc,IAAKC,EAAWC,IAAI,gBAE7B,iCAASV,EAAQI,cAErB,gCACI,mCACI,uCACA,qBAAKI,IAAKG,EAAYD,IAAI,iBAE9B,iCAASV,EAAQO,eAErB,sBAAKK,UAAU,uBAAf,UACI,mCACI,sCACA,qBAAKJ,IAAKK,EAAUH,IAAI,aAE5B,iCAASV,EAAQM,cC9C1B,I,EAAMZ,EAAYC,IAAOC,IAAV,kwBCEf,SAASkB,IACZ,IAAQtC,EAAiBgB,IAAjBhB,aACR,OACI,cAAC,EAAD,UACI,kCACI,gCACI,+BACI,2CACA,uCACA,2CACA,2CAIR,gCACKA,EAAauC,KAAI,SAAA/B,GAAW,OACzB,+BACI,6BAAKA,EAAYgC,QACjB,oBAAIJ,UAAW5B,EAAYmB,KAA3B,SACK,IAAIc,KAAKC,aAAa,QAAS,CAC5BC,MAAO,WACPC,SAAU,QACXC,OAAOrC,EAAYqB,UAE1B,6BAAKrB,EAAYsC,WACjB,6BACK,IAAIL,KAAKM,eAAe,SAASF,OAC9B,IAAIvC,KAAKE,EAAYH,gBAXxBG,EAAYwC,cClBtC,IAAM9B,EAAYC,IAAO8B,KAAV,oGCEf,SAASC,IACZ,OACI,eAAC,EAAD,WACI,cAAC7B,EAAD,IACA,cAACiB,EAAD,OCRG,I,IAAA,MAA0B,iCCE5BpB,EAAYC,IAAOgC,OAAV,0DAITC,EAAUjC,IAAOC,IAAV,4fCEb,SAASiC,EAAT,GAA0D,IAAzCC,EAAwC,EAAxCA,0BACpB,OACI,cAAC,EAAD,UACI,eAACF,EAAD,WACI,qBAAKpB,IAAKuB,EAASrB,IAAI,aACvB,wBAAQP,KAAK,SAAS6B,QAASF,EAA/B,uC,oBCVHpC,EAAYC,IAAOsC,KAAV,86BA+CTC,EAA2BvC,IAAOC,IAAV,4HAY/BuC,EAAS,CACXC,MAAO,UACPC,IAAK,WAGIC,EAAW3C,IAAO4C,OAAV,qpBAKK,SAACC,GAAD,OAAWA,EAAMC,SAC7BC,YAAe,GAAKP,EAAOK,EAAMG,cACjC,gBAUkBC,YAAO,GAAK,YCpF7B,MAA0B,kCCelC,SAASC,EAAT,GAAmF,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,eAClCxD,EAAsBC,IAAtBD,kBAER,EAA0BhB,mBAAS,IAAnC,mBAAOyC,EAAP,KAAcgC,EAAd,KACA,EAA4BzE,mBAAS,GAArC,mBAAO8B,EAAP,KAAe4C,EAAf,KACA,EAAgC1E,mBAAS,IAAzC,mBAAO+C,EAAP,KAAiB4B,EAAjB,KACA,EAAwB3E,mBAAS,WAAjC,mBAAO4B,EAAP,KAAagD,EAAb,KANqF,4CAQrF,WAA0CC,GAA1C,SAAAzE,EAAA,6DACIyE,EAAMC,iBADV,SAGU9D,EAAkB,CACpByB,QACAX,SACAiB,WACAnB,SAPR,OAUI6C,EAAS,IACTC,EAAU,GACVC,EAAY,IACZC,EAAQ,WACRJ,IAdJ,4CARqF,sBAyBrF,OACI,eAAC,IAAD,CACAD,OAAQA,EACRC,eAAgBA,EAChBO,iBAAiB,sBACjB1C,UAAU,sBAJV,UAMA,wBACAT,KAAK,SACL6B,QAASe,EACTnC,UAAU,oBAHV,SAII,qBAAKJ,IAAK+C,EAAU7C,IAAI,mBAG5B,eAAC,EAAD,CAAW8C,SAvCsE,4CAuCjF,UACI,2DAEA,uBACIC,YAAY,YACZnE,MAAO0B,EACP0C,SAAU,SAAAN,GAAK,OAAIJ,EAASI,EAAMO,OAAOrE,UAG7C,uBACIa,KAAK,SACLsD,YAAY,QACZnE,MAAOe,EACPqD,SAAU,SAAAN,GAAK,OAAIH,EAAUW,OAAOR,EAAMO,OAAOrE,WAGrD,eAAC4C,EAAD,WACI,eAACI,EAAD,CACInC,KAAK,SACL6B,QAAS,WAAQmB,EAAQ,YACzBV,SAAmB,YAATtC,EACVwC,YAAY,QAJhB,UAMI,qBAAKnC,IAAKC,EAAWC,IAAI,YACzB,8CAGJ,eAAC4B,EAAD,CACInC,KAAK,SACL6B,QAAS,WAAQmB,EAAQ,aACzBV,SAAmB,aAATtC,EACVwC,YAAY,MAJhB,UAMI,qBAAKnC,IAAKG,EAAYD,IAAI,UAC1B,+CAIR,uBACI+C,YAAY,YACZnE,MAAOgC,EACPoC,SAAU,SAAAN,GAAK,OAAIF,EAAYE,EAAMO,OAAOrE,UAGhD,wBAAQa,KAAK,SAAb,6BChGL,IAAM0D,EAAcC,YAAH,20DCSjB,SAASC,IACd,MAAoExF,oBAAS,GAA7E,mBAAOyF,EAAP,KAAmCC,EAAnC,KAQA,OACE,eAAC5F,EAAD,WACE,cAACwD,EAAD,CAAQC,0BATV,WACImC,GAA8B,MAShC,cAACvC,EAAD,IAEA,cAACmB,EAAD,CACEC,OAAQkB,EACRjB,eAVJ,WACIkB,GAA8B,MAYhC,cAACJ,EAAD,OArBNK,IAAMC,cAAc,S,aCJpBC,aAAa,CACXC,OAAQ,CACNrF,YAAasF,MAGfC,MALW,SAKLC,GACJA,EAAOC,GAAGC,SAAS,CACjBlG,aAAc,MAKlBmG,OAZW,WAYF,IAAD,OACNC,KAAKC,UAAY,MACjBD,KAAKzF,IAAI,iBAAiB,WACxB,OAAO,EAAK2F,OAAOC,IAAI,kBAGzBH,KAAKhG,KAAK,iBAAiB,SAACkG,EAAQE,GAClC,IAAM/F,EAAOgG,KAAKC,MAAMF,EAAQG,aAEhC,OAAOL,EAAO7G,OAAO,cAAegB,SAK1CmG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvB,EAAD,MAEFwB,SAASC,eAAe,W","file":"static/js/main.914380ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.6106d856.svg\";","export default __webpack_public_path__ + \"static/media/outcome.34032f7e.svg\";","export default __webpack_public_path__ + \"static/media/total.285fe24b.svg\";","import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n    baseURL: 'http://localhost:3000/api',\r\n})","import { createContext, useEffect, useState, ReactNode, useContext } from 'react'\r\nimport { api } from '../services/api';\r\n\r\ninterface Transaction {\r\n    id: number;\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n    createdAt: string;\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>; \r\n\r\ninterface TransactionsProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface TransactionsContextData {\r\n    transactions: Transaction[];\r\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nexport const TransactionsContext = createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n    useEffect(() => {\r\n        api.get('transactions')\r\n            .then(response => setTransactions(response.data.transactions))\r\n    }, []);\r\n\r\n    async function createTransaction(transactionInput: TransactionInput) {\r\n       const response = await api.post('/transactions', {\r\n            ...transactionInput,\r\n            createdAt: new Date(),\r\n        })\r\n       const { transaction } = response.data;\r\n\r\n       setTransactions([\r\n           ...transactions, \r\n           transaction,\r\n       ]);\r\n    }\r\n\r\n    return (\r\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTransactions() {\r\n    const context = useContext(TransactionsContext);\r\n    return context;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 2rem;\r\n    margin-top: -10rem;\r\n\r\n    div {\r\n        background: var(--shape);\r\n        padding: 1.5rem 2rem;\r\n        border-radius: 0.25rem;\r\n        color: var(--text-title);\r\n\r\n        header {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        strong {\r\n            display: block;\r\n            margin-top: 1rem;\r\n            font-size: 2rem;\r\n            font-weight: 500;\r\n            line-height: 3rem;\r\n        }\r\n\r\n        &.highlight-background {\r\n            background: var(--green);\r\n            color: #fff;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport incomeImg from '../../assets/income.svg';\r\nimport outcomeImg from '../../assets/outcome.svg';\r\nimport totalImg from '../../assets/total.svg';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Summary () {\r\n    const { transactions } = useTransactions();\r\n    console.log(transactions);\r\n\r\n    const summary = transactions.reduce((acc, transaction) => {\r\n        if (transaction.type === 'deposit') {\r\n            acc.deposits += transaction.amount;\r\n            acc.total += transaction.amount;\r\n        } else {\r\n            acc.withdraws += transaction.amount;\r\n            acc.total -= transaction.amount;\r\n        }\r\n        return acc;\r\n    }, {\r\n        deposits: 0,\r\n        withdraws: 0,\r\n        total: 0,\r\n    })\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <header>\r\n                    <p>Entradas</p>\r\n                    <img src={incomeImg} alt=\"Entradas\"/>\r\n                </header>\r\n                <strong>{summary.deposits}</strong>\r\n            </div>\r\n            <div>\r\n                <header>\r\n                    <p>Saidas</p>\r\n                    <img src={outcomeImg} alt=\"Saídas\"/>\r\n                </header>\r\n                <strong>{summary.withdraws}</strong>\r\n            </div>\r\n            <div className=\"highlight-background\">\r\n                <header>\r\n                    <p>Total</p>\r\n                    <img src={totalImg} alt=\"Total\"/>\r\n                </header>\r\n                <strong>{summary.total}</strong>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 4rem;\r\n    table {\r\n        width: 100%;\r\n        border-spacing: 0 0.5rem;\r\n\r\n        th {\r\n            color: var(--text-body);\r\n            font-weight: 400;\r\n            padding: 1rem 2rem;\r\n            text-align: left;\r\n            line-height: 1.5rem;\r\n        }\r\n\r\n        td {\r\n            padding: 1rem 2rem;\r\n            border: 0;\r\n            background: var(--shape);\r\n            color: var(--text-body);\r\n            border-radius: 0.25rem;\r\n\r\n            &:first-child {\r\n                color: var(--text-title);\r\n            }\r\n\r\n            &.deposit {\r\n                color: var(--green);\r\n            }\r\n            &.withdraw {\r\n                color: var(--red);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\r\nimport { Container } from \"./styles\";\r\n\r\n\r\nexport function TransactionsTable() {\r\n    const { transactions } = useTransactions();  \r\n    return(\r\n        <Container>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Título</th>\r\n                        <th>Valor</th>\r\n                        <th>Categoria</th>\r\n                        <th>Data</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {transactions.map(transaction => (\r\n                        <tr key={transaction.id}>\r\n                            <td>{transaction.title}</td>\r\n                            <td className={transaction.type}>\r\n                                {new Intl.NumberFormat('pt-BR', {\r\n                                    style: 'currency',\r\n                                    currency: 'BRL'\r\n                                }).format(transaction.amount)}\r\n                            </td>\r\n                            <td>{transaction.category}</td>\r\n                            <td>\r\n                                {new Intl.DateTimeFormat('pt-BR').format(\r\n                                    new Date(transaction.createdAt)\r\n                                )}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Container>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n    padding: 2.5rem 1rem;\r\n`;","import { Summary } from '../Summary';\r\nimport { TransactionsTable } from '../TransactionsTable';\r\nimport { Container } from './styles'\r\n\r\nexport function Dashboard() {\r\n    return (\r\n        <Container>\r\n            <Summary />\r\n            <TransactionsTable />\r\n        </Container>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.b30f412f.svg\";","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n    background: var(--blue);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2rem 1rem 12rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    button {\r\n        font-size: 1rem;\r\n        color: #fff;\r\n        background: var(--blue-light);\r\n        border: 0;\r\n        padding: 0 2rem;\r\n        border-radius: 0.25rem;\r\n        height: 3rem;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n`;","import logoImg from '../../assets/logo.svg'\r\n\r\nimport { Container, Content } from './styles'\r\n\r\ninterface HeaderProps {\r\n    onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({onOpenNewTransactionModal}: HeaderProps){\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <img src={logoImg} alt=\"dt money\" />\r\n                <button type=\"button\" onClick={onOpenNewTransactionModal}>\r\n                    Nova transação\r\n                </button>\r\n\r\n                \r\n            </Content>\r\n        </Container>\r\n    )\r\n}","import styled from 'styled-components';\r\nimport { darken, transparentize } from 'polished';\r\n\r\nexport const Container = styled.form`\r\n    h2{\r\n        color: var(--text-title);\r\n        font-size: 1.5rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    input{\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        border-radius: 0.25rem;\r\n        border: 1px solid #d7d7d7;\r\n        background: #e7e9ee;\r\n        font-weight: 400;\r\n        font-size: 1rem;\r\n        \r\n        &placeholder {\r\n            color: var(--text-body);\r\n        }\r\n\r\n        & + input {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n\r\n    button[type=\"submit\"] {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        background: var(--green);\r\n        color: #FFF;\r\n        border-radius: 0.25rem;\r\n        border: 0;\r\n        font-size: 1rem;\r\n        margin-top: 1.5rem;\r\n        font-weight: 600;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n    margin: 1rem 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.5rem;\r\n`;\r\n\r\ninterface RadioBoxProps {\r\n    isActive: boolean;\r\n    activeColor: 'green' | 'red';\r\n}\r\n\r\nconst colors = {\r\n    green: '#33CC95',\r\n    red: '#E52E4D'\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n            height: 4rem;\r\n            border: 1px;\r\n            border-radius: 0.25rem;\r\n\r\n            background: ${(props) => props.isActive \r\n            ? transparentize(0.9, colors[props.activeColor])\r\n            : 'transparent'\r\n            };\r\n\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            transition: border-color 0.2s;\r\n\r\n            &:hover {\r\n                border-color: ${darken(0.1, '#d7d7d7')};\r\n            }\r\n\r\n            img {\r\n                width: 20px;\r\n                height: 20px;\r\n            }\r\n\r\n            span {\r\n                display: inline-block;\r\n                margin-left: 1rem;\r\n                font-size: 1rem;\r\n                color: var(--text-title);\r\n            }\r\n`;","export default __webpack_public_path__ + \"static/media/close.db04ce19.svg\";","import { FormEvent, useState } from 'react'; \r\nimport Modal from 'react-modal';\r\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport incomeImg from '../../assets/income.svg';\r\nimport outcomeImg from '../../assets/outcome.svg';\r\nimport closeImg from '../../assets/close.svg';\r\n\r\n\r\ninterface NewTransactionModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({ isOpen, onRequestClose}: NewTransactionModalProps) {\r\n    const { createTransaction } = useTransactions();\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [category, setCategory] = useState('');\r\n    const [type, setType] = useState('deposit');\r\n\r\n    async function handleCreateNewTransaction(event: FormEvent) {\r\n        event.preventDefault();\r\n\r\n        await createTransaction({\r\n            title,\r\n            amount,\r\n            category,\r\n            type,\r\n        })\r\n\r\n        setTitle('');\r\n        setAmount(0);\r\n        setCategory('');\r\n        setType('deposit');\r\n        onRequestClose();\r\n    } \r\n \r\n    return (\r\n        <Modal \r\n        isOpen={isOpen}\r\n        onRequestClose={onRequestClose}\r\n        overlayClassName=\"react-modal-overlay\"\r\n        className=\"react-modal-content\"\r\n    >\r\n        <button \r\n        type=\"button\" \r\n        onClick={onRequestClose}\r\n        className=\"react-modal-close\">\r\n            <img src={closeImg} alt=\"Fechar modal\" />\r\n        </button>\r\n\r\n        <Container onSubmit={handleCreateNewTransaction}>\r\n            <h2>Cadastrar transação</h2>\r\n\r\n            <input\r\n                placeholder=\"Título\"\r\n                value={title}\r\n                onChange={event => setTitle(event.target.value)}\r\n            />\r\n\r\n            <input\r\n                type=\"number\"\r\n                placeholder=\"Valor\"\r\n                value={amount}\r\n                onChange={event => setAmount(Number(event.target.value))}\r\n            />\r\n\r\n            <TransactionTypeContainer>\r\n                <RadioBox\r\n                    type=\"button\"\r\n                    onClick={() => { setType('deposit');}}\r\n                    isActive={type === 'deposit'}\r\n                    activeColor=\"green\"\r\n                >\r\n                    <img src={incomeImg} alt=\"Entrada\" />\r\n                    <span>Entrada</span>\r\n                </RadioBox>\r\n\r\n                <RadioBox\r\n                    type=\"button\"\r\n                    onClick={() => { setType('withdraw');}}\r\n                    isActive={type === 'withdraw'}\r\n                    activeColor=\"red\"\r\n                >\r\n                    <img src={outcomeImg} alt=\"Saida\" />\r\n                    <span>Saida</span>\r\n                </RadioBox>\r\n            </TransactionTypeContainer>\r\n\r\n            <input\r\n                placeholder=\"Categoria\"\r\n                value={category}\r\n                onChange={event => setCategory(event.target.value)}\r\n            />\r\n\r\n            <button type=\"submit\">\r\n                Cadastrar\r\n            </button>\r\n\r\n        </Container>\r\n    </Modal>\r\n    );\r\n}","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --background: #f0f2f5;\r\n        --red: #e52e4d;\r\n        --green: #33cc95;\r\n        --blue: #5429cc;\r\n\r\n        --blue-light: #6933ff;\r\n\r\n        --text-title: #363f5f;\r\n        --text-body: #969cb3;\r\n\r\n        --background: #f0f2f5;\r\n        --shape: #ffffff;\r\n    }\r\n\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    // font-size: 16px (Desktop)\r\n    html {\r\n        @media (max-width: 1080px) {\r\n            font-size: 93.75%; // equivalente a 15px       \r\n        }\r\n\r\n        @media (max-width: 720px) {\r\n            font-size: 87.5%; // equivalente a 14px\r\n        }\r\n    }\r\n\r\n    // REM = 1rem = 16px\r\n\r\n    body{\r\n        background: var(---background);\r\n        -webkit-font-smoothing: antialiased;\r\n    }\r\n\r\n    body, input, textarea, button {\r\n        font-family: 'Poppins', sans-serif;\r\n        font-weight: 400;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6, strong {\r\n        font-weight: 600;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n\r\n    [disable] {\r\n        opacity: 0.6;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .react-modal-overlay {\r\n        background: rgb(0,0,0,0.5);\r\n        position: fixed;\r\n        top:0;\r\n        bottom:0;\r\n        right:0;\r\n        left:0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .react-modal-content{\r\n        width:100%;\r\n        max-width:576px;\r\n        background: var(--background);\r\n        padding: 3rem;\r\n        position:relative;\r\n        border-radius: 0.24rem;\r\n    }\r\n\r\n    .react-modal-close{\r\n        position: absolute;\r\n        right: 1.5rem;\r\n        top: 1.5rem;\r\n        border: 0;\r\n        background: transparent;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover{\r\n            filter: brightness(0.8);\r\n        }\r\n    }\r\n`","import { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { Dashboard } from \"./components/Dashboard\";\r\nimport { Header } from \"./components/Header\";\r\nimport { NewTransactionModal } from './components/NewTransactionModal';\r\nimport { TransactionsProvider } from './hooks/useTransactions';\r\n\r\nimport { GlobalStyle } from \"./styles/global\";\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport function App() {\r\n  const [isNewTransactionsModalOpen, setIsNewTransactionsModalOpen] = useState(false);\r\n    function handleOpenNewTransactionModal() {\r\n        setIsNewTransactionsModalOpen(true);\r\n    }\r\n\r\n    function handleCloseNewTransactionModal() {\r\n        setIsNewTransactionsModalOpen(false);\r\n    }\r\n  return (\r\n    <TransactionsProvider>\r\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\r\n      <Dashboard />\r\n\r\n      <NewTransactionModal \r\n        isOpen={isNewTransactionsModalOpen}\r\n        onRequestClose={handleCloseNewTransactionModal}\r\n      />\r\n\r\n      <GlobalStyle />\r\n    </TransactionsProvider>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport { createServer, Model } from 'miragejs'\r\n\r\ncreateServer({\r\n  models: {\r\n    transaction: Model, \r\n  },\r\n\r\n  seeds(server) {\r\n    server.db.loadData({\r\n      transactions: [\r\n      ],\r\n    })\r\n  },\r\n  \r\n  routes(){\r\n    this.namespace = 'api';\r\n    this.get('/transactions', () => {\r\n      return this.schema.all('transaction')\r\n    })\r\n\r\n    this.post('/transactions', (schema, request) => {\r\n      const data = JSON.parse(request.requestBody);\r\n\r\n      return schema.create('transaction', data)\r\n    })\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}